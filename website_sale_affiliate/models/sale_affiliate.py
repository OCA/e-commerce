# -*- coding: utf-8 -*-
# Copyright 2017 LasLabs Inc.
# License LGPL-3.0 or later (http://www.gnu.org/licenses/lgpl)

from odoo import api, fields, models
from odoo.http import request


class Affiliate(models.Model):
    _name = 'sale.affiliate'
    _order = 'create_date desc'

    name = fields.Char(required=True)
    partner_id = fields.Many2one(
        'res.partner',
        string='Partner',
        help='Partner associated with affiliation',
    )
    company_id = fields.Many2one(
        'res.company',
        string='Company',
        required=True,
        help='Company for affiliation',
    )
    sequence_id = fields.Many2one(
        'ir.sequence',
        string='Sequence',
        required=True,
        default=lambda self: self._default_sequence_id(),
        help='Sequence to use for affiliate request naming',
    )
    request_ids = fields.One2many(
        'sale.affiliate.request',
        'affiliate_id',
        string='Requests',
        help='Requests generated by the affiliate',
    )
    valid_hours = fields.Integer(
        required=True,
        default=24,
        help='If the request is more than this many hours old, it will not be '
        'counted as a qualified conversion if a sale takes place. Use '
        'negative numbers to indicate infinity.',
    )
    valid_sales = fields.Integer(
        required=True,
        default=1,
        help='If the request is already associated with this many sales, it '
        'will not be counted as a qualified conversion in the event of a new '
        'sale. Use negative numbers to indicate infinity.',
    )

    @api.model
    def _default_sequence_id(self):
        return self.env.ref(
            'website_sale_affiliate.request_sequence',
            raise_if_not_found=False,
        )

    @api.model_cr_context
    def find_from_session(self):
        """Find affiliate record based on session contents"""
        try:
            affiliate_id = request.session['affiliate_id']
            return self.search([('id', '=', affiliate_id)], limit=1)
        except KeyError:
            return

    @api.multi
    def get_request(self):
        self.ensure_one()
        Request = self.env['sale.affiliate.request']
        matching_request = Request.find_from_session(self)
        if not matching_request:
            matching_request = Request.create_from_session(self)
        if matching_request.conversions_qualify():
            return matching_request
        return
